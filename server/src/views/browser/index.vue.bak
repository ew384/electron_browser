<template>
  <div class="browser-list">
    <div class="toolbar">
      <el-button type="primary" @click="createBrowser">创建浏览器</el-button>
    </div>
    <el-table :data="browserList">
      <el-table-column prop="id" label="ID" width="100" />
      <el-table-column prop="name" label="名称" />
      <el-table-column prop="status" label="状态">
        <template slot-scope="scope">
          <el-tag :type="scope.row.status === 'running' ? 'success' : 'info'">
            {{ scope.row.status === 'running' ? '运行中' : '已停止' }}
          </el-tag>
        </template>
      </el-table-column>
      <el-table-column label="操作">
        <template slot-scope="scope">
          <el-button 
            v-if="scope.row.status !== 'running'"
            type="primary" 
            size="small" 
            @click="launchBrowser(scope.row.id)"
          >
            启动
          </el-button>
          <el-button 
            v-else
            type="danger" 
            size="small" 
            @click="closeBrowser(scope.row.id)"
          >
            关闭
          </el-button>
        </template>
      </el-table-column>
    </el-table>
  </div>
</template>

<script>
import { getBrowserList, addBrowser } from '@/api/native';
import { launchBrowser, closeBrowser } from '@/api/electron';

export default {
  data() {
    return {
      browserList: []
    };
  },
  created() {
    this.loadBrowserList();
  },
  methods: {
    async loadBrowserList() {
      this.browserList = await getBrowserList();
    },
    async createBrowser() {
      const browser = {
        name: `浏览器 ${this.browserList.length + 1}`,
        status: 'stopped'
      };
      await addBrowser(browser);
      await this.loadBrowserList();
    },
    async launchBrowser(browserId) {
      try {
        const result = await launchBrowser(browserId);
        if (result.success) {
          this.$message.success('浏览器启动成功');
          // 更新状态
          const browser = this.browserList.find(b => b.id === browserId);
          if (browser) {
            browser.status = 'running';
          }
        }
      } catch (error) {
        this.$message.error('启动失败: ' + error.message);
      }
    },
    async closeBrowser(browserId) {
      try {
        const result = await closeBrowser(browserId);
        if (result.success) {
          this.$message.success('浏览器已关闭');
          // 更新状态
          const browser = this.browserList.find(b => b.id === browserId);
          if (browser) {
            browser.status = 'stopped';
          }
        }
      } catch (error) {
        this.$message.error('关闭失败: ' + error.message);
      }
    }
  }
};
</script>

<style scoped>
.browser-list {
  padding: 20px;
}
.toolbar {
  margin-bottom: 20px;
}
</style>
